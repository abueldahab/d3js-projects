// Generated by CoffeeScript 1.6.3
(function() {
  define(["d3", "lodash"], function(d3, _) {
    var animate, config, load, render;
    config = {
      width: 960,
      height: 2200
    };
    load = function(path, cb) {
      var days;
      days = {
        name: "Days",
        children: []
      };
      return d3.csv(path, function(e, data) {
        var map;
        map = function(data, field) {
          var grouped;
          grouped = _.groupBy(data, field);
          return _.map(grouped, function(arr, name) {
            return {
              name: name,
              children: _.map(arr, function(e) {
                return _.omit(e, field);
              })
            };
          });
        };
        days.children = map(data, 'DATE');
        _.each(days.children, function(date) {
          date.children = map(date.children, 'TIME');
          return _.each(date.children, function(time) {
            time.children = map(time.children, 'EVENTTYPE');
            return _.each(time.children, function(eventtype) {
              return eventtype.children = map(eventtype.children, 'EVENT');
            });
          });
        });
        return cb(days);
      });
    };
    animate = function(data) {
      var click, diagonal, duration, exec, h, i, root, tree, update, vis, w;
      w = 960;
      h = 2000;
      i = 0;
      duration = 500;
      root = void 0;
      update = function(source) {
        var link, node, nodeEnter, nodes;
        nodes = tree.nodes(root).reverse();
        console.log(nodes);
        node = vis.selectAll("g.node").data(nodes, function(d) {
          return d.id || (d.id = ++i);
        });
        nodeEnter = node.enter().append("svg:g").attr("class", "node").attr("transform", function(d) {
          return "translate(" + source.y0 + "," + source.x0 + ")";
        });
        nodeEnter.append("svg:circle").attr("r", 4.5).style("fill", function(d) {
          if (d._children) {
            return "lightsteelblue";
          } else {
            return "#fff";
          }
        }).on("click", click);
        nodeEnter.append("svg:text").attr("x", function(d) {
          if (d._children) {
            return -8;
          } else {
            return 8;
          }
        }).attr("y", 3).text(function(d) {
          return d.name;
        });
        nodeEnter.transition().duration(duration).attr("transform", function(d) {
          return "translate(" + d.y + "," + d.x + ")";
        }).style("opacity", 1).select("circle").style("fill", "lightsteelblue");
        node.transition().duration(duration).attr("transform", function(d) {
          return "translate(" + d.y + "," + d.x + ")";
        }).style("opacity", 1);
        node.exit().transition().duration(duration).attr("transform", function(d) {
          return "translate(" + source.y + "," + source.x + ")";
        }).style("opacity", 1e-6).remove();
        link = vis.selectAll("path.link").data(tree.links(nodes), function(d) {
          return d.target.id;
        });
        link.enter().insert("svg:path", "g").attr("class", "link").attr("d", function(d) {
          var o;
          o = {
            x: source.x0,
            y: source.y0
          };
          return diagonal({
            source: o,
            target: o
          });
        }).transition().duration(duration).attr("d", diagonal);
        link.transition().duration(duration).attr("d", diagonal);
        link.exit().transition().duration(duration).attr("d", function(d) {
          var o;
          o = {
            x: source.x,
            y: source.y
          };
          return diagonal({
            source: o,
            target: o
          });
        }).remove();
        return nodes.forEach(function(d) {
          d.x0 = d.x;
          return d.y0 = d.y;
        });
      };
      click = function(d) {
        if (d.children) {
          d._children = d.children;
          d.children = null;
        } else {
          d.children = d._children;
          d._children = null;
        }
        return update(d);
      };
      tree = d3.layout.tree().size([h, w - 160]);
      diagonal = d3.svg.diagonal().projection(function(d) {
        return [d.y, d.x];
      });
      vis = d3.select("#chart").append("svg:svg").attr("width", w).attr("height", h).append("svg:g").attr("transform", "translate(40,0)");
      exec = function(json) {
        json.x0 = 800;
        json.y0 = 0;
        return update(root = json);
      };
      d3.select(self.frameElement).style("height", "2000px");
      return exec(data);
    };
    render = function(data) {
      var cluster, diagonal, exec, height, svg, width;
      width = config.width;
      height = config.height;
      cluster = d3.layout.cluster().size([height, width - 160]);
      diagonal = d3.svg.diagonal().projection(function(d) {
        return [d.y, d.x];
      });
      svg = d3.select("body").append("svg").attr("width", width).attr("height", height).append("g").attr("transform", "translate(40,0)");
      exec = function(root) {
        var link, links, node, nodes;
        nodes = cluster.nodes(root);
        links = cluster.links(nodes);
        link = svg.selectAll(".link").data(links).enter().append("path").attr("class", "link").attr("d", diagonal);
        node = svg.selectAll(".node").data(nodes).enter().append("g").attr("class", "node").attr("transform", function(d) {
          return "translate(" + d.y + ", " + d.x + ")";
        });
        node.append("circle").attr("r", 4.5);
        return node.append("text").attr("dx", function(d) {
          if (d.children) {
            return -8;
          } else {
            return 8;
          }
        }).attr("dy", 3).style("text-anchor", function(d) {
          if (d.children) {
            return "end";
          } else {
            return "start";
          }
        }).text(function(d) {
          return d.name;
        });
      };
      d3.select(self.frameElement).style("height", "" + height + "px");
      return exec(data);
    };
    return {
      load: load,
      render: render,
      animate: animate,
      config: config
    };
  });

}).call(this);

/*
//@ sourceMappingURL=app.map
*/
